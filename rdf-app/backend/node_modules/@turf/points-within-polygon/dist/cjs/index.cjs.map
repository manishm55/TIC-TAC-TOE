{"version":3,"sources":["/home/runner/work/turf/turf/packages/turf-points-within-polygon/dist/cjs/index.cjs","../../index.ts"],"names":[],"mappings":"AAAA;ACUA,uEAAwD;AACxD,wCAA8C;AAC9C,kCAAiD;AAqCjD,SAAS,mBAAA,CAIP,MAAA,EAGA,QAAA,EAC0C;AAC1C,EAAA,MAAM,QAAA,EAA4C,CAAC,CAAA;AACnD,EAAA,+BAAA,MAAY,EAAQ,QAAA,CAAU,KAAA,EAAO;AACnC,IAAA,IAAI,UAAA,EAAY,KAAA;AAChB,IAAA,GAAA,CAAI,KAAA,CAAM,QAAA,CAAS,KAAA,IAAS,OAAA,EAAS;AACnC,MAAA,4BAAA,QAAS,EAAU,QAAA,CAAU,OAAA,EAAS;AACpC,QAAA,GAAA,CAAI,0DAAA,KAAe,EAA4B,OAAO,CAAA,EAAG;AACvD,UAAA,UAAA,EAAY,IAAA;AAAA,QACd;AAAA,MACF,CAAC,CAAA;AACD,MAAA,GAAA,CAAI,SAAA,EAAW;AACb,QAAA,OAAA,CAAQ,IAAA,CAAK,KAAK,CAAA;AAAA,MACpB;AAAA,IACF,EAAA,KAAA,GAAA,CAAW,KAAA,CAAM,QAAA,CAAS,KAAA,IAAS,YAAA,EAAc;AAC/C,MAAA,IAAI,aAAA,EAA2B,CAAC,CAAA;AAChC,MAAA,4BAAA,QAAS,EAAU,QAAA,CAAU,OAAA,EAAS;AACpC,QAAA,6BAAA,KAAU,EAA8B,QAAA,CAAU,UAAA,EAAY;AAC5D,UAAA,GAAA,CAAI,0DAAA,UAAe,EAAY,OAAO,CAAA,EAAG;AACvC,YAAA,UAAA,EAAY,IAAA;AACZ,YAAA,YAAA,CAAa,IAAA,CAAK,UAAU,CAAA;AAAA,UAC9B;AAAA,QACF,CAAC,CAAA;AAAA,MACH,CAAC,CAAA;AACD,MAAA,GAAA,CAAI,SAAA,EAAW;AACb,QAAA,OAAA,CAAQ,IAAA;AAAA,UACN,iCAAA,YAAW,EAAc,KAAA,CAAM,UAAU;AAAA,QAC3C,CAAA;AAAA,MACF;AAAA,IACF,EAAA,KAAO;AACL,MAAA,MAAM,IAAI,KAAA,CAAM,8CAA8C,CAAA;AAAA,IAChE;AAAA,EACF,CAAC,CAAA;AACD,EAAA,OAAO,wCAAA,OAAyB,CAAA;AAClC;AAGA,IAAO,mCAAA,EAAQ,mBAAA;ADtDf;AACE;AACA;AACF,wGAAC","file":"/home/runner/work/turf/turf/packages/turf-points-within-polygon/dist/cjs/index.cjs","sourcesContent":[null,"import type {\n  Feature,\n  FeatureCollection,\n  Polygon,\n  MultiPolygon,\n  MultiPoint,\n  Point,\n  GeoJsonProperties,\n  Position,\n} from \"geojson\";\nimport { booleanPointInPolygon as pointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { featureCollection, multiPoint } from \"@turf/helpers\";\nimport { geomEach, featureEach, coordEach } from \"@turf/meta\";\n\n/**\n * Finds {@link Points} or {@link MultiPoint} coordinate positions that fall within {@link (Multi)Polygon(s)}.\n *\n * @function\n * @param {Feature|FeatureCollection<Point|MultiPoint>} points Point(s) or MultiPoint(s) as input search\n * @param {FeatureCollection|Geometry|Feature<Polygon|MultiPolygon>} polygons (Multi)Polygon(s) to check if points are within\n * @returns {FeatureCollection<Point|MultiPoint>} Point(s) or MultiPoint(s) with positions that land within at least one polygon.  The geometry type will match what was passsed in\n * @example\n * var points = turf.points([\n *     [-46.6318, -23.5523],\n *     [-46.6246, -23.5325],\n *     [-46.6062, -23.5513],\n *     [-46.663, -23.554],\n *     [-46.643, -23.557]\n * ]);\n *\n * var searchWithin = turf.polygon([[\n *     [-46.653,-23.543],\n *     [-46.634,-23.5346],\n *     [-46.613,-23.543],\n *     [-46.614,-23.559],\n *     [-46.631,-23.567],\n *     [-46.653,-23.560],\n *     [-46.653,-23.543]\n * ]]);\n *\n * var ptsWithin = turf.pointsWithinPolygon(points, searchWithin);\n *\n * //addToMap\n * var addToMap = [points, searchWithin, ptsWithin]\n * turf.featureEach(ptsWithin, function (currentFeature) {\n *   currentFeature.properties['marker-size'] = 'large';\n *   currentFeature.properties['marker-color'] = '#000';\n * });\n */\nfunction pointsWithinPolygon<\n  G extends Polygon | MultiPolygon,\n  P extends GeoJsonProperties,\n>(\n  points:\n    | Feature<Point | MultiPoint, P>\n    | FeatureCollection<Point | MultiPoint, P>,\n  polygons: Feature<G> | FeatureCollection<G> | G\n): FeatureCollection<Point | MultiPoint, P> {\n  const results: Feature<Point | MultiPoint, P>[] = [];\n  featureEach(points, function (point) {\n    let contained = false;\n    if (point.geometry.type === \"Point\") {\n      geomEach(polygons, function (polygon) {\n        if (pointInPolygon(point as Feature<Point, P>, polygon)) {\n          contained = true;\n        }\n      });\n      if (contained) {\n        results.push(point);\n      }\n    } else if (point.geometry.type === \"MultiPoint\") {\n      var pointsWithin: Position[] = [];\n      geomEach(polygons, function (polygon) {\n        coordEach(point as Feature<MultiPoint>, function (pointCoord) {\n          if (pointInPolygon(pointCoord, polygon)) {\n            contained = true;\n            pointsWithin.push(pointCoord);\n          }\n        });\n      });\n      if (contained) {\n        results.push(\n          multiPoint(pointsWithin, point.properties) as Feature<MultiPoint, P>\n        );\n      }\n    } else {\n      throw new Error(\"Input geometry must be a Point or MultiPoint\");\n    }\n  });\n  return featureCollection(results);\n}\n\nexport { pointsWithinPolygon };\nexport default pointsWithinPolygon;\n"]}