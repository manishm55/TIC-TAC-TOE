{"version":3,"sources":["../../index.ts"],"sourcesContent":["import {\n  BBox,\n  Feature,\n  FeatureCollection,\n  Point,\n  Polygon,\n  Position,\n} from \"geojson\";\nimport { polygon, featureCollection, isObject } from \"@turf/helpers\";\nimport { collectionOf } from \"@turf/invariant\";\nimport { cloneProperties } from \"@turf/clone\";\nimport * as d3voronoi from \"d3-voronoi\";\n\n/**\n * Creates a polygon from a list of coordinates. Ensures the polygon is closed.\n *\n * @private\n * @param {Position[]} coords representing a polygon\n * @returns {Feature<Polygon>} polygon\n */\nfunction coordsToPolygon(coords: Position[]) {\n  coords = coords.slice();\n  coords.push(coords[0]);\n  return polygon([coords]);\n}\n\n/**\n * Takes a collection of points and a bounding box, and returns a collection\n * of Voronoi polygons.\n *\n * The Voronoi algorithim used comes from the d3-voronoi package.\n *\n * @function\n * @param {FeatureCollection<Point>} points points around which to calculate the Voronoi polygons\n * @param {Object} [options={}] Optional parameters\n * @param {BBox} [options.bbox=[-180, -85, 180, -85]] clipping rectangle, in [minX, minY, maxX, MaxY] order\n * @returns {FeatureCollection<Polygon>} a set of polygons, one per input point\n * @example\n * const options = {\n *   bbox: [-70, 40, -60, 60]\n * };\n * const points = turf.randomPoint(100, options);\n * const voronoiPolygons = turf.voronoi(points, options);\n *\n * //addToMap\n * const addToMap = [voronoiPolygons, points];\n */\nfunction voronoi(\n  points: FeatureCollection<Point>,\n  options?: { bbox?: BBox }\n): FeatureCollection<Polygon> {\n  // Optional params\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const bbox = options.bbox || [-180, -85, 180, 85];\n\n  // Input Validation\n  if (!points) throw new Error(\"points is required\");\n  if (!Array.isArray(bbox)) throw new Error(\"bbox is invalid\");\n  collectionOf(points, \"Point\", \"points\");\n\n  // Main\n  return featureCollection(\n    d3voronoi\n      .voronoi<Feature<Point>>()\n      .x((feature) => feature.geometry.coordinates[0])\n      .y((feature) => feature.geometry.coordinates[1])\n      .extent([\n        [bbox[0], bbox[1]],\n        [bbox[2], bbox[3]],\n      ])\n      .polygons(points.features)\n      .map(function (coords, index) {\n        return Object.assign(coordsToPolygon(coords), {\n          properties: cloneProperties(points.features[index].properties),\n        });\n      })\n  );\n}\n\nexport { voronoi };\nexport default voronoi;\n"],"mappings":";AAQA,SAAS,SAAS,mBAAmB,gBAAgB;AACrD,SAAS,oBAAoB;AAC7B,SAAS,uBAAuB;AAChC,YAAY,eAAe;AAS3B,SAAS,gBAAgB,QAAoB;AAC3C,WAAS,OAAO,MAAM;AACtB,SAAO,KAAK,OAAO,CAAC,CAAC;AACrB,SAAO,QAAQ,CAAC,MAAM,CAAC;AACzB;AAuBA,SAASA,SACP,QACA,SAC4B;AAE5B,YAAU,WAAW,CAAC;AACtB,MAAI,CAAC,SAAS,OAAO,EAAG,OAAM,IAAI,MAAM,oBAAoB;AAC5D,QAAM,OAAO,QAAQ,QAAQ,CAAC,MAAM,KAAK,KAAK,EAAE;AAGhD,MAAI,CAAC,OAAQ,OAAM,IAAI,MAAM,oBAAoB;AACjD,MAAI,CAAC,MAAM,QAAQ,IAAI,EAAG,OAAM,IAAI,MAAM,iBAAiB;AAC3D,eAAa,QAAQ,SAAS,QAAQ;AAGtC,SAAO;AAAA,IAEF,kBAAwB,EACxB,EAAE,CAAC,YAAY,QAAQ,SAAS,YAAY,CAAC,CAAC,EAC9C,EAAE,CAAC,YAAY,QAAQ,SAAS,YAAY,CAAC,CAAC,EAC9C,OAAO;AAAA,MACN,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,MACjB,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,IACnB,CAAC,EACA,SAAS,OAAO,QAAQ,EACxB,IAAI,SAAU,QAAQ,OAAO;AAC5B,aAAO,OAAO,OAAO,gBAAgB,MAAM,GAAG;AAAA,QAC5C,YAAY,gBAAgB,OAAO,SAAS,KAAK,EAAE,UAAU;AAAA,MAC/D,CAAC;AAAA,IACH,CAAC;AAAA,EACL;AACF;AAGA,IAAO,uBAAQC;","names":["voronoi","voronoi"]}